.\" Man page generated from reStructuredText.
.
.TH "HASHKIT_CLONE" "3" "February 09, 2014" "1.0.18" "libmemcached"
.SH NAME
hashkit_clone \- libhashkit Documentation
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.SH SYNOPSIS
.sp
#include <libhashkit/hashkit.h>
.INDENT 0.0
.TP
.B hashkit_st
.UNINDENT
.INDENT 0.0
.TP
.B \fI\%hashkit_st\fP *hashkit_create(\fI\%hashkit_st\fP\fI\ *hash\fP)
.UNINDENT
.INDENT 0.0
.TP
.B \fI\%hashkit_st\fP *hashkit_clone(\fI\%hashkit_st\fP\fI\ *destination\fP, const \fI\%hashkit_st\fP\fI\ *ptr\fP)
.UNINDENT
.INDENT 0.0
.TP
.B void hashkit_free(\fI\%hashkit_st\fP\fI\ *hash\fP)
.UNINDENT
.INDENT 0.0
.TP
.B bool hashkit_is_allocated(const \fI\%hashkit_st\fP\fI\ *hash\fP)
.UNINDENT
.sp
Compile and link with \-lhashkit
.SH DESCRIPTION
.sp
The \fI\%hashkit_create()\fP function initializes a hashkit object for use. If
you pass a NULL argument for hash, then the memory for the object is
allocated. If you specify a pre\-allocated piece of memory, that is
initialized for use.
.sp
The \fI\%hashkit_clone()\fP function initializes a hashkit object much like
\fI\%hashkit_create()\fP, but instead of using default settings it will use
the settings of the ptr hashkit object.
.sp
The \fI\%hashkit_free()\fP frees any resources being consumed by the hashkit
objects that were initialized with \fI\%hashkit_create()\fP or \fI\%hashkit_clone()\fP\&.
.sp
The \fI\%hashkit_is_allocated()\fP reports where the memory was allocated
for a hashkit object.
.SH RETURN VALUE
.sp
\fI\%hashkit_create()\fP and \fI\%hashkit_clone()\fP will return NULL on
failure or non\-NULL on success.
.sp
\fI\%hashkit_is_allocated()\fP returns true if the memory for the hashkit
object was allocated inside of \fI\%hashkit_create()\fP or
\fI\%hashkit_clone()\fP, otherwise it is false and was user\-supplied memory.
.SH HOME
.sp
To find out more information please check:
\fI\%http://libmemcached.org/\fP
.SH SEE ALSO
.sp
\fIhashkit_create(3)\fP \fIhashkit_value(3)\fP \fIhashkit_set_hash_fn(3)\fP
.SH AUTHOR
Brian Aker
.SH COPYRIGHT
2011-2013, Brian Aker DataDifferential, http://datadifferential.com/
.\" Generated by docutils manpage writer.
.
