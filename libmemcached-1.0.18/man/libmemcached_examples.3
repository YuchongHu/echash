.\" Man page generated from reStructuredText.
.
.TH "LIBMEMCACHED_EXAMPLES" "3" "February 09, 2014" "1.0.18" "libmemcached"
.SH NAME
libmemcached_examples \- libmemcached Documentation
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.sp
Examples for libmemcached
.SH DESCRIPTION
.sp
For full examples, test cases are found in tests/*.c in the main
distribution. These are always up to date, and are used for each test run of
the library.
.SH CONNECTING TO SERVERS
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
const char *config_string= "\-\-SERVER=host10.example.com \-\-SERVER=host11.example.com \-\-SERVER=host10.example.com"
memcached_st *memc= memcached(config_string, strlen(config_string);
{
\&...
}
 memcached_free(memc);
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
In the above code you create a \fBmemcached_st\fP object with three server
by making use of \fBmemcached_create()\fP\&.
.SH CREATING A POOL OF SERVERS
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C

.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Creating a pool of Servers:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
const char *config_string= "\-\-SERVER=host10.example.com \-\-SERVER=host11.example.com \-\-SERVER=host10.example.com";

memcached_pool_st* pool= memcached_pool(config_string, strlen(config_string));

memcached_return_t rc;

memcached_st *memc= memcached_pool_pop(pool, false, &rc);

\&.... do work

/*
  Release the memc_ptr that was pulled from the pool
*/
memcached_pool_push(pool, memc);

/*
  Destroy the pool.
*/
memcached_pool_destroy(pool);
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
In the above code you create a \fBmemcached_pool_st\fP object with three
server by making use of \fBmemcached_pool()\fP\&.
.sp
When \fBmemcached_pool_destroy()\fP all memory will be released that is associated
with the pool.
.SH ADDING A VALUE TO THE SERVER
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C

.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Adding a value to the Server:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
char *key= "foo";
char *value= "value";

memcached_return_t rc= memcached_set(memc, key, strlen(key), value, value_length, (time_t)0, (uint32_t)0);

if (rc != MEMCACHED_SUCCESS)
{
\&... // handle failure
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
It is best practice to always look at the return value of any operation.
.SH FETCHING MULTIPLE VALUES
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
memcached_return_t rc;
char *keys[]= {"fudge", "son", "food"};
size_t key_length[]= {5, 3, 4};
unsigned int x;
uint32_t flags;

char return_key[MEMCACHED_MAX_KEY];
size_t return_key_length;
char *return_value;
size_t return_value_length;

rc= memcached_mget(memc, keys, key_length, 3);

x= 0;
while ((return_value= memcached_fetch(memc, return_key, &return_key_length,
                                      &return_value_length, &flags, &rc)))
{
  free(return_value);
  x++;
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Notice that you freed values returned from memcached_fetch(). The define
\fBMEMCACHED_MAX_KEY\fP is provided for usage.
.SH HOME
.sp
To find out more information please check:
\fI\%http://libmemcached.org/\fP
.SH SEE ALSO
.sp
\fImemcached(1)\fP
.SH AUTHOR
Brian Aker
.SH COPYRIGHT
2011-2013, Brian Aker DataDifferential, http://datadifferential.com/
.\" Generated by docutils manpage writer.
.
