.\" Man page generated from reStructuredText.
.
.TH "MEMCACHED_STAT" "3" "February 09, 2014" "1.0.18" "libmemcached"
.SH NAME
memcached_stat \- libmemcached Documentation
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.sp
Get memcached statistics
.SH SYNOPSIS
.sp
#include <libmemcached/memcached.h>
.INDENT 0.0
.TP
.B memcached_stat_st
.UNINDENT
.INDENT 0.0
.TP
.B memcached_return_t (*memcached_stat_fn)(const memcached_instance_st *\fI\ server\fP, const char\fI\ *key\fP, size_t\fI\ key_length\fP, const char\fI\ *value\fP, size_t\fI\ value_length\fP, void\fI\ *context\fP)
.UNINDENT
.INDENT 0.0
.TP
.B \fI\%memcached_stat_st\fP *memcached_stat(memcached_st\fI\ *ptr\fP, char\fI\ *args\fP, memcached_return_t\fI\ *error\fP)
.UNINDENT
.INDENT 0.0
.TP
.B memcached_return_t memcached_stat_servername(\fI\%memcached_stat_st\fP\fI\ *stat\fP, char\fI\ *args\fP, const char\fI\ *hostname\fP, in_port_t\fI\ port\fP)
.UNINDENT
.INDENT 0.0
.TP
.B char * memcached_stat_get_value(memcached_st\fI\ *ptr\fP, \fI\%memcached_stat_st\fP\fI\ *stat\fP, const char\fI\ *key\fP, memcached_return_t\fI\ *error\fP)
.UNINDENT
.INDENT 0.0
.TP
.B char ** memcached_stat_get_keys(memcached_st\fI\ *ptr\fP, \fI\%memcached_stat_st\fP\fI\ *stat\fP, memcached_return_t\fI\ *error\fP)
.UNINDENT
.INDENT 0.0
.TP
.B memcached_return_t memcached_stat_execute(memcached_st\fI\ *memc\fP, const char\fI\ *args\fP, \fI\%memcached_stat_fn\fP\fI\ func\fP, void\fI\ *context\fP)
.UNINDENT
.sp
Compile and link with \-lmemcached
.SH DESCRIPTION
.sp
libmemcached(3) has the ability to query a memcached server (or collection
of servers) for their current state. Queries to find state return a
\fI\%memcached_stat_st\fP structure. You are responsible for freeing this structure. While it is possible to access the structure directly it is not advisable. \fI\%memcached_stat_get_value()\fP has been provided to query the structure.
.sp
\fI\%memcached_stat_execute()\fP uses the servers found in \fI\%memcached_stat_st\fP and executes a "stat" command on each server. args is an optional argument that can be passed in to modify the behavior of "stats". You will need to supply a callback function that will be supplied each pair of values returned by
the memcached server.
.sp
\fI\%memcached_stat()\fP fetches an array of \fI\%memcached_stat_st\fP structures containing the state of all available memcached servers. The return value must be freed by the calling application. If called with the \fBMEMCACHED_BEHAVIOR_USE_UDP\fP behavior set, a NULL value is returned and the error parameter is set to \fBMEMCACHED_NOT_SUPPORTED\fP\&.
.sp
\fI\%memcached_stat_servername()\fP can be used standalone without a \fBmemcached_st\fP to obtain the state of a particular server.  "args" is used to define a particular state object (a list of these are not provided for by either
the \fI\%memcached_stat_get_keys()\fP call nor are they defined in the memcached protocol). You must specify the hostname and port of the server you want to
obtain information on.
.sp
\fI\%memcached_stat_get_value()\fP returns the value of a particular state key. You specify the key you wish to obtain.  The key must be null terminated.
.sp
\fI\%memcached_stat_get_keys()\fP returns a list of keys that the server has state objects on. You are responsible for freeing this list.
.sp
A command line tool, memstat(1), is provided so that you do not have to write
an application to do this.
.SH RETURN
.sp
Varies, see particular functions.
.sp
Any method returning a \fI\%memcached_stat_st\fP expects you to free the
memory allocated for it.
.SH HOME
.sp
To find out more information please check:
\fI\%http://libmemcached.org/\fP
.SH AUTHOR
.sp
Brian Aker, <\fI\%brian@tangent.org\fP>
.SH SEE ALSO
.sp
\fImemcached(1)\fP \fIlibmemcached(3)\fP \fImemcached_strerror(3)\fP
.SH AUTHOR
Brian Aker
.SH COPYRIGHT
2011-2013, Brian Aker DataDifferential, http://datadifferential.com/
.\" Generated by docutils manpage writer.
.
