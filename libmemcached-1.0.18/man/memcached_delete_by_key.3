.\" Man page generated from reStructuredText.
.
.TH "MEMCACHED_DELETE_BY_KEY" "3" "February 09, 2014" "1.0.18" "libmemcached"
.SH NAME
memcached_delete_by_key \- libmemcached Documentation
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.SH SYNOPSIS
.sp
#include <libmemcached/memcached.h>
.INDENT 0.0
.TP
.B memcached_return_t memcached_delete(memcached_st\fI\ *ptr\fP, const char\fI\ *key\fP, size_t\fI\ key_length\fP, time_t\fI\ expiration\fP)
.UNINDENT
.INDENT 0.0
.TP
.B memcached_return_t memcached_delete_by_key(memcached_st\fI\ *ptr\fP, const char\fI\ *group_key\fP, size_t\fI\ group_key_length\fP, const char\fI\ *key\fP, size_t\fI\ key_length\fP, time_t\fI\ expiration\fP)
.UNINDENT
.sp
Compile and link with \-lmemcached
.SH DESCRIPTION
.sp
\fI\%memcached_delete()\fP is used to delete a particular key.
\fI\%memcached_delete_by_key()\fP works the same, but it takes a master key
to find the given value.
.sp
Expiration works by placing the item into a delete queue, which means that
it won\(aqt be possible to retrieve it by the "get" command. The "add" and
"replace" commands with this key will also fail (the "set" command will
succeed, however). After the time passes, the item is finally deleted from server memory.
.sp
Please note the the Danga memcached server removed tests for expiration in
the 1.4 version.
.SH RETURN
.sp
A value of type \fBmemcached_return_t\fP is returned
On success that value will be \fBMEMCACHED_SUCCESS\fP\&.
Use \fBmemcached_strerror()\fP to translate this value to a printable
string.
.sp
If you are using the non\-blocking mode of the library, success only
means that the message was queued for delivery.
.SH HOME
.sp
To find out more information please check:
\fI\%http://libmemcached.org/\fP
.SH AUTHOR
.sp
Brian Aker, <\fI\%brian@tangent.org\fP>
.SH SEE ALSO
.sp
\fImemcached(1)\fP \fIlibmemcached(3)\fP \fImemcached_strerror(3)\fP
.SH AUTHOR
Brian Aker
.SH COPYRIGHT
2011-2013, Brian Aker DataDifferential, http://datadifferential.com/
.\" Generated by docutils manpage writer.
.
