.\" Man page generated from reStructuredText.
.
.TH "MEMCACHED_SET_MEMORY_ALLOCATORS" "3" "February 09, 2014" "1.0.18" "libmemcached"
.SH NAME
memcached_set_memory_allocators \- libmemcached Documentation
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.sp
Manage memory allocator functions
.SH SYNOPSIS
.sp
#include <libmemcached/memcached.h>
.INDENT 0.0
.TP
.B memcached_return_t memcached_set_memory_allocators(memcached_st\fI\ *ptr\fP, \fI\%memcached_malloc_fn\fP\fI\ mem_malloc\fP, \fI\%memcached_free_fn\fP\fI\ mem_free\fP, \fI\%memcached_realloc_fn\fP\fI\ mem_realloc\fP, \fI\%memcached_calloc_fn\fP\fI\ mem_calloc\fP, void\fI\ *context\fP)
.UNINDENT
.INDENT 0.0
.TP
.B void memcached_get_memory_allocators(memcached_st\fI\ *ptr\fP, \fI\%memcached_malloc_fn\fP\fI\ *mem_malloc\fP, \fI\%memcached_free_fn\fP\fI\ *mem_free\fP, \fI\%memcached_realloc_fn\fP\fI\ *mem_realloc\fP, \fI\%memcached_calloc_fn\fP\fI\ *mem_calloc\fP)
.UNINDENT
.INDENT 0.0
.TP
.B void * memcached_get_memory_allocators_context(const memcached_st\fI\ *ptr\fP)
.UNINDENT
.INDENT 0.0
.TP
.B void * (*memcached_malloc_fn)(memcached_st\fI\ *ptr\fP, const size_t\fI\ size\fP, void\fI\ *context\fP)
.UNINDENT
.INDENT 0.0
.TP
.B void * (*memcached_realloc_fn)(memcached_st\fI\ *ptr\fP, void\fI\ *mem\fP, const size_t\fI\ size\fP, void\fI\ *context\fP)
.UNINDENT
.INDENT 0.0
.TP
.B void (*memcached_free_fn)(memcached_st\fI\ *ptr\fP, void\fI\ *mem\fP, void\fI\ *context\fP)
.UNINDENT
.INDENT 0.0
.TP
.B void * (*memcached_calloc_fn)(memcached_st\fI\ *ptr\fP, size_t\fI\ nelem\fP, const size_t\fI\ elsize\fP, void\fI\ *context\fP)
.UNINDENT
.sp
Compile and link with \-lmemcached
.SH DESCRIPTION
.sp
libmemcached(3) allows you to specify your own memory allocators, optimized
for your application. This enables libmemcached to be used inside of applications that have their own malloc implementation.
.sp
\fI\%memcached_set_memory_allocators()\fP is used to set the memory
allocators used by the memcached instance specified by ptr. Please note that
you cannot override only one of the memory allocators, you have to specify a
complete new set if you want to override one of them. All of the memory
allocation functions should behave as specified in the C99 standard. Specify
NULL as all functions to reset them to the default values.
.sp
\fI\%memcached_get_memory_allocators()\fP is used to get the currently used
memory allocators by a mamcached handle.
.sp
\fI\%memcached_get_memory_allocators_context()\fP returns the void * that
was passed in during the call to \fI\%memcached_set_memory_allocators()\fP\&.
.sp
The first argument to the memory allocator functions is a pointer to a
memcached structure, the is passed as const and you will need to clone
it in order to make use of any operation which would modify it.
.SH NOTES
.sp
In version 0.38 all functions were modified to have a context void pointer
passed to them. This was so that customer allocators could have their
own space for memory.
.SH RETURN
.sp
\fI\%memcached_set_memory_allocators()\fP return \fBMEMCACHED_SUCCESS\fP
upon success, and \fBMEMCACHED_FAILURE\fP if you don\(aqt pass a complete set
of function pointers.
.SH HOME
.sp
To find out more information please check:
\fI\%http://libmemcached.org/\fP
.SH SEE ALSO
.sp
\fImemcached(1)\fP \fIlibmemcached(3)\fP \fImemcached_strerror(3)\fP
.SH AUTHOR
Brian Aker
.SH COPYRIGHT
2011-2013, Brian Aker DataDifferential, http://datadifferential.com/
.\" Generated by docutils manpage writer.
.
