.\" Man page generated from reStructuredText.
.
.TH "MEMCACHED_BEHAVIOR_GET" "3" "February 09, 2014" "1.0.18" "libmemcached"
.SH NAME
memcached_behavior_get \- libmemcached Documentation
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.sp
Manipulate the behavior of a memcached_st structure.
.SH SYNOPSIS
.sp
#include <libmemcached/memcached.h>
.INDENT 0.0
.TP
.B memcached_behavior_t
.UNINDENT
.INDENT 0.0
.TP
.B uint64_t memcached_behavior_get(memcached_st\fI\ *ptr\fP, \fI\%memcached_behavior_t\fP\fI\ flag\fP)
.UNINDENT
.INDENT 0.0
.TP
.B memcached_return_t memcached_behavior_set(memcached_st\fI\ *ptr\fP, \fI\%memcached_behavior_t\fP\fI\ flag\fP, uint64_t\fI\ data\fP)
.UNINDENT
.sp
Compile and link with \-lmemcached
.SH DESCRIPTION
.sp
\fIlibmemcached(3)\fP behavior can be modified by using \fI\%memcached_behavior_set()\fP\&. Default behavior is the library strives to be quick and
accurate. Some behavior, while being faster, can also result in not entirely
accurate behavior (for instance, \fBmemcached_set()\fP will always respond
with \fBMEMCACHED_SUCCESS\fP).
.sp
\fI\%memcached_behavior_get()\fP takes a behavior flag and returns whether or not that behavior is currently enabled in the client.
.sp
\fI\%memcached_behavior_set()\fP changes the value of a particular option
of the client. It takes both a flag (listed below) and a value. For simple
on or off options you just need to pass in a value of 1. Calls to
\fI\%memcached_behavior_set()\fP will flush and reset all connections.
.INDENT 0.0
.TP
.B MEMCACHED_BEHAVIOR_USE_UDP
.UNINDENT
.sp
Causes \fIlibmemcached(3)\fP to use the UDP transport when communicating
with a memcached server. Not all I/O operations are testsed
when this behavior is enababled. The following operations will return
\fBMEMCACHED_NOT_SUPPORTED\fP when executed with the
\fI\%MEMCACHED_BEHAVIOR_USE_UDP\fP enabled: \fBmemcached_version()\fP,
\fBmemcached_stat()\fP, \fBmemcached_get()\fP,
\fBmemcached_get_by_key()\fP, \fBmemcached_mget()\fP,
\fBmemcached_mget_by_key()\fP, \fBmemcached_fetch()\fP,
\fBmemcached_fetch_result()\fP, \fBmemcached_fetch_execute()\fP\&.
.sp
All other operations are testsed but are executed in a \(aqfire\-and\-forget\(aq
mode, in which once the client has executed the operation, no attempt
will be made to ensure the operation has been received and acted on by the
server.
.sp
\fIlibmemcached(3)\fP does not allow TCP and UDP servers to be shared
within the same libmemached(3) client \(aqinstance\(aq. An attempt to add a TCP
server when this behavior is enabled will result in a \fBMEMCACHED_INVALID_HOST_PROTOCOL\fP, as will attempting to add a UDP server when this behavior has
not been enabled.
.INDENT 0.0
.TP
.B MEMCACHED_BEHAVIOR_NO_BLOCK
.UNINDENT
.sp
Causes \fIlibmemcached(3)\fP to use asychronous IO. This is the fastest
transport available for storage functions.
.INDENT 0.0
.TP
.B MEMCACHED_BEHAVIOR_SND_TIMEOUT
.UNINDENT
.sp
This sets the microsecond behavior of the socket against the SO_SNDTIMEO flag.  In cases where you cannot use non\-blocking IO this will allow you to still have timeouts on the sending of data.
.INDENT 0.0
.TP
.B MEMCACHED_BEHAVIOR_RCV_TIMEOUT
.UNINDENT
.sp
This sets the microsecond behavior of the socket against the SO_RCVTIMEO flag.
.sp
In cases where you cannot use non\-blocking IO this will allow you to still have timeouts on the reading of data.
.INDENT 0.0
.TP
.B MEMCACHED_BEHAVIOR_TCP_NODELAY
.UNINDENT
.sp
Turns on the no\-delay feature for connecting sockets (may be faster in some
environments).
.INDENT 0.0
.TP
.B MEMCACHED_BEHAVIOR_HASH
.UNINDENT
.sp
Makes the default hashing algorithm for keys use MD5. The value can be set to either \fBMEMCACHED_HASH_DEFAULT\fP, \fBMEMCACHED_HASH_MD5\fP, \fBMEMCACHED_HASH_CRC\fP, \fBMEMCACHED_HASH_FNV1_64\fP, \fBMEMCACHED_HASH_FNV1A_64\fP, \fBMEMCACHED_HASH_FNV1_32\fP, \fBMEMCACHED_HASH_FNV1A_32\fP, \fBMEMCACHED_HASH_JENKINS\fP, \fBMEMCACHED_HASH_HSIEH\fP, and \fBMEMCACHED_HASH_MURMUR\fP\&.
.sp
Each hash has it\(aqs advantages and it\(aqs weaknesses. If you don\(aqt know or don\(aqt
care, just go with the default.
.sp
Support for \fBMEMCACHED_HASH_HSIEH\fP is a compile time option that is disabled by default. To enable tests for this hashing algorithm, configure and build libmemcached with the \-\-enable\-hash_hsieh.
.INDENT 0.0
.TP
.B MEMCACHED_BEHAVIOR_DISTRIBUTION
.UNINDENT
.sp
Using this you can enable different means of distributing values to servers.
.sp
The default method is MEMCACHED_DISTRIBUTION_MODULA. You can enable consistent hashing by setting MEMCACHED_DISTRIBUTION_CONSISTENT.  Consistent hashing delivers better distribution and allows servers to be added to the cluster with minimal cache losses. Currently MEMCACHED_DISTRIBUTION_CONSISTENT is an alias for the value MEMCACHED_DISTRIBUTION_CONSISTENT_KETAMA.
.INDENT 0.0
.TP
.B MEMCACHED_BEHAVIOR_CACHE_LOOKUPS
.UNINDENT
.sp
Deprecated since version 0.46(?): DNS lookups are now always cached until an error occurs with the server.
.sp
Memcached can cache named lookups so that DNS lookups are made only once.

.INDENT 0.0
.TP
.B MEMCACHED_BEHAVIOR_SUPPORT_CAS
.UNINDENT
.sp
Support CAS operations (this is not enabled by default at this point in the server since it imposes a slight performance penalty).
.INDENT 0.0
.TP
.B MEMCACHED_BEHAVIOR_KETAMA
.UNINDENT
.sp
Sets the default distribution to MEMCACHED_DISTRIBUTION_CONSISTENT_KETAMA and
the hash to \fBMEMCACHED_HASH_MD5\fP\&.
.INDENT 0.0
.TP
.B MEMCACHED_BEHAVIOR_KETAMA_WEIGHTED
Sets the default distribution to MEMCACHED_DISTRIBUTION_CONSISTENT_KETAMA with the weighted tests.  and the hash to MEMCACHED_HASH_MD5.
.UNINDENT
.INDENT 0.0
.TP
.B MEMCACHED_BEHAVIOR_KETAMA_HASH
.UNINDENT
.sp
Sets the hashing algorithm for host mapping on continuum. The value can be set
to either \fBMEMCACHED_HASH_DEFAULT\fP, \fBMEMCACHED_HASH_MD5\fP,
\fBMEMCACHED_HASH_CRC\fP, \fBMEMCACHED_HASH_FNV1_64\fP,
\fBMEMCACHED_HASH_FNV1A_64\fP, \fBMEMCACHED_HASH_FNV1_32\fP, and
\fBMEMCACHED_HASH_FNV1A_32\fP\&.
.INDENT 0.0
.TP
.B MEMCACHED_BEHAVIOR_KETAMA_COMPAT
.UNINDENT
.sp
Sets the compatibility mode. The value can be set to either MEMCACHED_KETAMA_COMPAT_LIBMEMCACHED (this is the default) or MEMCACHED_KETAMA_COMPAT_SPY to be compatible with the SPY Memcached client for Java.
.INDENT 0.0
.TP
.B MEMCACHED_BEHAVIOR_POLL_TIMEOUT
.UNINDENT
.sp
Modify the timeout value that is used by poll. The default value is \-1. An signed int must be passed to memcached_behavior_set to change this value (this requires casting). For memcached_behavior_get a signed int value will be cast and returned as the unsigned long long.
.INDENT 0.0
.TP
.B MEMCACHED_BEHAVIOR_USER_DATA
.UNINDENT
.sp
Deprecated since version <: 0.30
.INDENT 0.0
.TP
.B MEMCACHED_BEHAVIOR_BUFFER_REQUESTS
.UNINDENT
.sp
Enabling buffered IO causes commands to "buffer" instead of being sent. Any action that gets data causes this buffer to be be sent to the remote connection. Quiting the connection or closing down the connection will also cause the buffered data to be pushed to the remote connection.
.INDENT 0.0
.TP
.B MEMCACHED_BEHAVIOR_VERIFY_KEY
.UNINDENT
.sp
Enabling this will cause \fIlibmemcached(3)\fP to test all keys to verify that they are valid keys.
.INDENT 0.0
.TP
.B MEMCACHED_BEHAVIOR_SORT_HOSTS
.UNINDENT
.sp
Enabling this will cause hosts that are added to be placed in the host list in sorted order. This will defeat consisten hashing.
.INDENT 0.0
.TP
.B MEMCACHED_BEHAVIOR_CONNECT_TIMEOUT
.UNINDENT
.sp
In non\-blocking mode this changes the value of the timeout during socket connection in milliseconds. Specifying \-1 means an infinite time‐out.
.INDENT 0.0
.TP
.B MEMCACHED_BEHAVIOR_BINARY_PROTOCOL
.UNINDENT
.sp
Enable the use of the binary protocol. Please note that you cannot toggle this flag on an open connection.
.INDENT 0.0
.TP
.B MEMCACHED_BEHAVIOR_SERVER_FAILURE_LIMIT
.UNINDENT
.sp
Set this value to enable the server be removed after continuous MEMCACHED_BEHAVIOR_SERVER_FAILURE_LIMIT times connection failure.
.INDENT 0.0
.TP
.B MEMCACHED_BEHAVIOR_IO_MSG_WATERMARK
.UNINDENT
.sp
Set this value to tune the number of messages that may be sent before libmemcached should start to automatically drain the input queue. Setting this value to high, may cause libmemcached to deadlock (trying to send data, but the send will block because the input buffer in the kernel is full).
.INDENT 0.0
.TP
.B MEMCACHED_BEHAVIOR_IO_BYTES_WATERMARK
.UNINDENT
.sp
Set this value to tune the number of bytes that may be sent before libmemcached should start to automatically drain the input queue (need at least 10 IO requests sent without reading the input buffer). Setting this value to high, may cause libmemcached to deadlock (trying to send data, but the send will block because the input buffer in the kernel is full).
.INDENT 0.0
.TP
.B MEMCACHED_BEHAVIOR_IO_KEY_PREFETCH
.UNINDENT
.sp
The binary protocol works a bit different than the textual protocol in that a multiget is implemented as a pipe of single get\-operations which are sent to the server in a chunk. If you are using large multigets from your application, you may improve the latency of the gets by setting this value so you send out the first chunk of requests when you hit the specified limit.  It allows the servers to start processing the requests to send the data back while the rest of the requests are created and sent to the server.
.INDENT 0.0
.TP
.B MEMCACHED_BEHAVIOR_NOREPLY
.UNINDENT
.sp
Set this value to specify that you really don\(aqt care about the result from your storage commands (set, add, replace, append, prepend).
.INDENT 0.0
.TP
.B MEMCACHED_BEHAVIOR_NUMBER_OF_REPLICAS
.UNINDENT
.sp
If you just want "a poor mans HA", you may specify the numbers of replicas libmemcached should store of each item (on different servers).  This replication does not dedicate certain memcached servers to store the replicas in, but instead it will store the replicas together with all of the other objects (on the \(aqn\(aq next servers specified in your server list).
.INDENT 0.0
.TP
.B MEMCACHED_BEHAVIOR_RANDOMIZE_REPLICA_READ
.UNINDENT
.sp
Allows randomizing the replica reads starting point. Normally the read is done from primary server and in case of miss the read is done from primary + 1, then primary + 2 all the way to \(aqn\(aq replicas. If this option is set on the starting point of the replica reads is randomized between the servers.  This allows distributing read load to multiple servers with the expense of more write traffic.
.INDENT 0.0
.TP
.B MEMCACHED_BEHAVIOR_CORK
.UNINDENT
.sp
This open has been deprecated with the behavior now built and used appropriately on selected platforms.
.INDENT 0.0
.TP
.B MEMCACHED_BEHAVIOR_KEEPALIVE
.UNINDENT
.sp
Enable TCP_KEEPALIVE behavior.
.INDENT 0.0
.TP
.B MEMCACHED_BEHAVIOR_KEEPALIVE_IDLE
.UNINDENT
.sp
Specify time, in seconds, to mark a connection as idle. This is only available as an option Linux.
.INDENT 0.0
.TP
.B MEMCACHED_BEHAVIOR_SOCKET_SEND_SIZE
.UNINDENT
.sp
Find the current size of SO_SNDBUF. A value of 0 means either an error occured or no hosts were available. It is safe to assume system default if this occurs. If an error occurs you can checked the last cached errno statement to find the specific error.
.INDENT 0.0
.TP
.B MEMCACHED_BEHAVIOR_SOCKET_RECV_SIZE
.UNINDENT
.sp
Find the current size of SO_RCVBUF. A value of 0 means either an error occured or no hosts were available. It is safe to assume system default if this occurs. If an error occurs you can checked the last cached errno statement to find the specific error.
.INDENT 0.0
.TP
.B MEMCACHED_BEHAVIOR_SERVER_FAILURE_LIMIT
.UNINDENT
.sp
Deprecated since version 0.48: See \fI\%MEMCACHED_BEHAVIOR_REMOVE_FAILED_SERVERS\fP
.sp
This number of times a host can have an error before it is disabled.

.INDENT 0.0
.TP
.B MEMCACHED_BEHAVIOR_AUTO_EJECT_HOSTS
.UNINDENT
.sp
Deprecated since version 0.48: See \fI\%MEMCACHED_BEHAVIOR_REMOVE_FAILED_SERVERS\fP
.sp
If enabled any hosts which have been flagged as disabled will be removed from the list of servers in the memcached_st structure. This must be used in combination with MEMCACHED_BEHAVIOR_SERVER_FAILURE_LIMIT.

.INDENT 0.0
.TP
.B MEMCACHED_BEHAVIOR_REMOVE_FAILED_SERVERS
If enabled any hosts which have been flagged as disabled will be removed from the list of servers in the memcached_st structure.
.UNINDENT
.INDENT 0.0
.TP
.B MEMCACHED_BEHAVIOR_RETRY_TIMEOUT
.UNINDENT
.sp
When enabled a host which is problematic will only be checked for usage based on the amount of time set by this behavior. The value is in seconds.
.INDENT 0.0
.TP
.B MEMCACHED_BEHAVIOR_HASH_WITH_PREFIX_KEY
.UNINDENT
.sp
When enabled the prefix key will be added to the key when determining server
by hash. See \fBMEMCACHED_CALLBACK_NAMESPACE\fP for additional
information.
.SH RETURN
.sp
memcached_behavior_get returns either the current value of the get, or 0
or 1 on simple flag behaviors (1 being enabled). memcached_behavior_set
returns failure or success.
.SH NOTES
.sp
memcached_behavior_set in version .17 was changed from taking a pointer
to data value, to taking a uin64_t.
.SH HOME
.sp
To find out more information please check:
\fI\%http://libmemcached.org/\fP
.SH SEE ALSO
.sp
\fImemcached(1)\fP \fIlibmemcached(3)\fP \fImemcached_strerror(3)\fP
.SH AUTHOR
Brian Aker
.SH COPYRIGHT
2011-2013, Brian Aker DataDifferential, http://datadifferential.com/
.\" Generated by docutils manpage writer.
.
